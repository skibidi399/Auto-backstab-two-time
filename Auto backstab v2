local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local lp = Players.LocalPlayer

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BackstabToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = lp:WaitForChild("PlayerGui")

-- Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 150, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Backstab: OFF"
toggleButton.Parent = screenGui

-- Range Label
local rangeLabel = Instance.new("TextLabel")
rangeLabel.Size = UDim2.new(0, 150, 0, 20)
rangeLabel.Position = UDim2.new(0, 10, 0, 55)
rangeLabel.BackgroundTransparency = 1
rangeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
rangeLabel.Font = Enum.Font.SourceSans
rangeLabel.TextSize = 16
rangeLabel.Text = "Range:"
rangeLabel.Parent = screenGui

-- TextBox for Range Input
local rangeBox = Instance.new("TextBox")
rangeBox.Size = UDim2.new(0, 150, 0, 25)
rangeBox.Position = UDim2.new(0, 10, 0, 75)
rangeBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
rangeBox.TextColor3 = Color3.fromRGB(255, 255, 255)
rangeBox.Font = Enum.Font.SourceSans
rangeBox.TextSize = 16
rangeBox.PlaceholderText = "Enter range (1 - 10)"
rangeBox.Text = "4"
rangeBox.ClearTextOnFocus = false
rangeBox.Parent = screenGui

-- Range Mode Label
local modeLabel = Instance.new("TextLabel")
modeLabel.Size = UDim2.new(0, 150, 0, 20)
modeLabel.Position = UDim2.new(0, 10, 0, 105)
modeLabel.BackgroundTransparency = 1
modeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
modeLabel.Font = Enum.Font.SourceSans
modeLabel.TextSize = 16
modeLabel.Text = "Range Mode:"
modeLabel.Parent = screenGui

-- Range Mode Toggle Button
local modeToggle = Instance.new("TextButton")
modeToggle.Size = UDim2.new(0, 150, 0, 25)
modeToggle.Position = UDim2.new(0, 10, 0, 125)
modeToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
modeToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
modeToggle.Font = Enum.Font.SourceSans
modeToggle.TextSize = 16
modeToggle.Text = "Behind"
modeToggle.Parent = screenGui

-- Mode switching logic
local rangeMode = "Behind" -- or "Circle"
modeToggle.MouseButton1Click:Connect(function()
	rangeMode = (rangeMode == "Behind") and "Circle" or "Behind"
	modeToggle.Text = rangeMode
end)

-- Vars
local enabled = false
local cooldown = false
local lastTarget = nil
local range = 4
local daggerRemote = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
local killerNames = { "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")

-- GUI toggle
toggleButton.MouseButton1Click:Connect(function()
	enabled = not enabled
	toggleButton.Text = "Backstab: " .. (enabled and "ON" or "OFF")
	toggleButton.BackgroundColor3 = enabled and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(30, 30, 30)
end)

-- TextBox Range Handling
rangeBox.FocusLost:Connect(function()
	local input = tonumber(rangeBox.Text)
	if input and input >= 1 and input <= 10 then
		range = input
	else
		rangeBox.Text = tostring(range) -- Revert to last valid value
	end
end)

-- Helpers

-- Fling to killer and return in same frame
local function flingToKillerBackAndReturn(char, targetHRP)
	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp or not targetHRP then return end

	local originalPosition = hrp.Position
	local originalVelocity = hrp.Velocity

	local backDirection = -targetHRP.CFrame.LookVector
	local flingVelocity = backDirection * 120

	-- Apply velocity
	hrp.Velocity = flingVelocity

	-- Wait 1 physics frame
	RunService.Heartbeat:Wait()

	-- Restore position and velocity
	hrp.CFrame = CFrame.new(originalPosition)
	hrp.Velocity = originalVelocity
end

local function isInRange(hrp, targetHRP)
	local toPlayer = (hrp.Position - targetHRP.Position)
	local distance = toPlayer.Magnitude

	if rangeMode == "Circle" then
		return distance <= range
	elseif rangeMode == "Behind" then
		local direction = -targetHRP.CFrame.LookVector
		local isBehind = toPlayer:Dot(direction) > 0.5
		return distance <= range and isBehind
	end

	return false
end

-- Main loop
RunService.Heartbeat:Connect(function()
	if not isActive then return end

	local char = LocalPlayer.Character
	if not char or not char:FindFirstChild("HumanoidRootPart") then return end

	local hrp = char.HumanoidRootPart
	local nearest, distance = getNearestKiller(range)

	if nearest and distance then
		local kHRP = nearest:FindFirstChild("HumanoidRootPart")
		if not kHRP then return end

		local targetCFrame

		if rangeMode == "Circle" or rangeMode == "Behind" then
			local behind = kHRP.CFrame * CFrame.new(0, 0, -2.5)
			targetCFrame = CFrame.new(behind.Position, kHRP.Position)
		elseif rangeMode == "Line" then
			targetCFrame = CFrame.new(kHRP.Position + kHRP.CFrame.LookVector * -2, kHRP.Position)
		else
			targetCFrame = hrp.CFrame
		end

		-- Teleport to killer's back
		hrp.CFrame = targetCFrame
		hrp.Velocity = Vector3.zero

		-- Face toward killer again
		hrp.CFrame = CFrame.new(hrp.Position, kHRP.Position)

		if not didDagger then
			didDagger = true

			-- Trigger dagger
			daggerRemote:FireServer("UseActorAbility", "Dagger")

			-- Fling for 1 frame after dagger
			if rangeMode == "Circle" then
				flingToKillerBackAndReturn(char, kHRP)
			end

			-- Reset back
			task.delay(0.1, function()
				local originalPos = storedPos or Vector3.zero
				hrp.CFrame = CFrame.new(originalPos)
				hrp.Velocity = Vector3.zero
				didDagger = false
			end)
		end
	end
end)
